.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "farkdata 3pm"
.TH farkdata 3pm "2019-10-07" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "makeBilinear"
.IX Subsection "makeBilinear"
.Vb 1
\&  "makeBilinear" adds bilinear slice information to the Hash.
\&
\&  Return:
.Ve
.IP "The hash object passed to it." 4
.IX Item "The hash object passed to it."
.PP
\s-1EXAMPLE\s0
.IX Subsection "EXAMPLE"
.PP
.Vb 1
\&    $farkdata\->makeBilinear();
.Ve
.SS "interpolate"
.IX Subsection "interpolate"
.Vb 1
\&  "interpolate" uses the specified method to interpolate all variables.
\&
\&  Arguments:
.Ve
.ie n .IP "(string) names of interpolation method. The method slicing coefficients must be calculated and present in the ""slice"" branch." 4
.el .IP "(string) names of interpolation method. The method slicing coefficients must be calculated and present in the ``slice'' branch." 4
.IX Item "(string) names of interpolation method. The method slicing coefficients must be calculated and present in the slice branch."
.PP
.Vb 1
\&  Return:
.Ve
.IP "The hash object passed to it." 4
.IX Item "The hash object passed to it."
.PP
\s-1EXAMPLE\s0
.IX Subsection "EXAMPLE"
.PP
.Vb 1
\&    $farkdata\->interpolate();
.Ve
.SS "compress"
.IX Subsection "compress"
.Vb 1
\&  "compress" removes all hashes with a single entry.
\&
\&  Return:
.Ve
.IP "The compressed hash object." 4
.IX Item "The compressed hash object."
.PP
\s-1EXAMPLE\s0
.IX Subsection "EXAMPLE"
.PP
.Vb 1
\&    $farkdata\->compress();
.Ve
.SS "selectKey"
.IX Subsection "selectKey"
.Vb 2
\&  "selectKey" returns Hash where only the specified key\-value is selected if more
\&   were available, in which case the key itself is also eliminated.
\&
\&  Arguments:
.Ve
.IP "(string) names of key to search for." 4
.IX Item "(string) names of key to search for."
.PP
.Vb 1
\&  Return:
.Ve
.IP "The Hash object where only the specified key-value is selected if more were available, in which case the key itself is also eliminated." 4
.IX Item "The Hash object where only the specified key-value is selected if more were available, in which case the key itself is also eliminated."
.PP
\s-1EXAMPLE\s0
.IX Subsection "EXAMPLE"
.PP
.Vb 1
\&    my $select = $farkdata\->selectKey("bilinear");
.Ve
.SS "printTree"
.IX Subsection "printTree"
.Vb 1
\&  "printTree" prints a string\-representation of the given hash\-reference
\&
\&  Arguments:
.Ve
.IP "(String) prefix" 4
.IX Item "(String) prefix"
.PP
\s-1EXAMPLE\s0
.IX Subsection "EXAMPLE"
.PP
.Vb 1
\&    my $farkdata\->printTree("#Fark: ");
.Ve
.SS "getBranch"
.IX Subsection "getBranch"
.Vb 2
\&  "getBranch" returns a copy of the branch with the specified key=>value pairs,
\&   starting at the tree\-root.
\&
\&  Arguments:
.Ve
.IP "(Hashref) key => value pairs that should be present in the resulting branch." 4
.IX Item "(Hashref) key => value pairs that should be present in the resulting branch."
.PP
.Vb 1
\&  Return:
.Ve
.IP "The Hash reference to the branch containing the specified key=>value pairs." 4
.IX Item "The Hash reference to the branch containing the specified key=>value pairs."
.PP
\s-1EXAMPLE\s0
.IX Subsection "EXAMPLE"
.PP
.Vb 1
\&    $hashref \-> getBranch({"variable" => "geopotential_height_ml"});
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 349:" 4
.IX Item "Around line 349:"
Unknown directive: =backs
.IP "Around line 351:" 4
.IX Item "Around line 351:"
You forgot a '=back' before '=head4'
