  subroutine colocation_makeTable(css,mss,oss,ounit,name80,&
       & ncol,col80,exp250,leg250,test,crc250,irc)
    use model
    use observations
    use parse
    implicit none
    type(col_session), pointer ::  css !  current session
    type(mod_session), pointer ::  mss !  current session
    type(obs_session), pointer ::  oss !  current session
    integer :: ounit ! output unit
    character*80 :: name80
    integer :: ncol
    character*80, allocatable :: col80(:)
    character*250, allocatable :: exp250(:)
    character*250 :: leg250
    integer :: test
    character*250 :: crc250
    integer :: irc
    character*22 :: myname ="maketable"
    !
    bok=.true.
    !
    ! Get chain-counts
    !
    tmod=model_targetCount(mss,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"model_targetCount")
       return
    end if
    emod=colocation_matchCount(css,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"model_matchCount")
       return
    end if
    dmod=colocation_defaultCount(css,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"model_defaultCount")
       return
    end if
    tobs=observation_targetCount(oss,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"observation_targetCount")
       return
    end if
    if (tmod.ne.0.and.tobs.ne.0.and.(emod.eq.0.and.dmod.eq.0)) then
       irc=231
       call colocation_errorappend(crc250,"Missing model match rules,")
       call colocation_errorappendi(crc250,tmod)
       call colocation_errorappendi(crc250,emod)
       call colocation_errorappendi(crc250,dmod)
       call colocation_errorappendi(crc250,tobs)
       return
    else if (tmod.ne.0.and.tobs.eq.0.and.(emod.eq.0.and.dmod.eq.0)) then
       irc=232
       call colocation_errorappend(crc250,"Missing model default values.")
       call colocation_errorappendi(crc250,tmod)
       call colocation_errorappendi(crc250,emod)
       call colocation_errorappendi(crc250,dmod)
       call colocation_errorappendi(crc250,tobs)
       return
    end if
    !
    ! make target lists
    if (tmod.eq.0) then
       bobsind=.false.
    else
       bobsind=observation_hasValidIndex(oss,crc250,irc)
       if (irc.ne.0) then
          call colocation_errorappend(crc250,"observation_hasValidIndex")
          return
       end if
    end if
    ! make expression lists
    ! count expressions (match-expressions + obs-index-expression)
    ! make lists
    if(col_bdeb)write(*,*)myname,'Make model target list.'
    call model_makeTargetList(mss,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"model_makeTargetList")
       return
    end if
    if(col_bdeb)write(*,*)myname,'Make obs target list.'
    call observation_makeTargetList(oss,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"observation_makeTargetList")
       return
    end if
    if(col_bdeb)write(*,*)myname,'Import targets.'
    call colocation_importTargets(css,mss,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"colocation_importTargets")
       return
    end if
    if(col_bdeb)write(*,*)myname,'Match targets.'
    if (tobs.ne.0.and.tmod.ne.0) then
       call colocation_makeMatchList(css,mss,crc250,irc)
       if (irc.ne.0) then
          call colocation_errorappend(crc250,"colocation_makeMatchList")
          return
       end if
    end if
    ! set slice model variables equal to match variables
    call model_sliceIndex(mss,css%cmatch,css%ind,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"model_sliceIndex")
       return
    end if
    if(col_bdeb)write(*,*)myname,'Compile expressions.',emod,associated(css)
    if (associated(css)) then
       ! compile match-experssions
       call colocation_compileMatch(css,oss%trg80,crc250,irc)
       if (irc.ne.0) then
          call colocation_errorappend(crc250,"model_compileMatch")
          return
       end if
    else
       irc=123
       call colocation_errorappend(crc250,"No matchs available")
       return
    end if
    ! convert obs start/end limits (time) to model start/end limits if possible
    if(col_bdeb)write(*,*)myname,'Setting limits.',mss%ind_lval,mss%ind_minval,&
         & mss%ind_maxval,oss%ind_lval(2),oss%ind_minval,oss%ind_maxval
    mod_lval(1)=.false. ! are model limits available?
    mod_lval(2)=.false. ! are model limits available?
    ! set observation transformation...
    ! transformation is first expression but last target, How strange!
    call observation_setTransformation(oss,css%psp(1)%ptr,crc250,irc) ! css%cmatch => last match pattern
    if (irc.ne.0) then
       call colocation_errorappend(crc250,myname)
       call colocation_errorappend(crc250,"Error return from 'setTransformation'.")
       return
    end if
    ! convert obs-limits to mod-limits
    mod_lval(1)=mss%ind_lval(1)
    mod_minval = mss%ind_minval
    if (mod_lval(1).and.oss%ind_lval(1)) then
       mod_minval=max(mod_minval,oss%ind_minval)
    else if (oss%ind_lval(1)) then
       mod_minval=oss%ind_minval
       mod_lval(1)=.true.
    end if
    mod_lval(2)=mss%ind_lval(2)
    mod_maxval = mss%ind_maxval
    if (mod_lval(2).and.oss%ind_lval(2)) then
       mod_maxval=min(mod_maxval,oss%ind_maxval)
    else if (oss%ind_lval(2)) then
       mod_maxval=oss%ind_maxval
       mod_lval(2)=.true.
    end if
    if(col_bdeb)write(*,*)myname,'Adjusting MOD limits:',mod_lval,mod_minval,mod_maxval
    call model_setFileStackLimits(mss,mod_lval,mod_minval,mod_maxval,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,myname)
       call colocation_errorappend(crc250,"Error return from 'model_setFileStackLimits'.")
       return
    end if
    !
    if(col_bdeb)write(*,*)myname,'Entering model file loop.',mod_lval,mod_minval,mod_maxval,obs_lval,obs_minval,obs_maxval
    locid=0 ! observation count (= identification)
    if (test.eq.0) then
       MODFILE: do ! need to enter loop if (tmod.eq.0)
          if (tmod.ne.0) then ! we have model targets specified
             bok= model_loopFileStack(mss,crc250,irc)
             if (irc.ne.0) then
                call colocation_errorappend(crc250,"model_loopFileStack")
                return
             end if
             if (.not.bok) then
                if(col_bdeb)write(*,*)myname,'No more model files.'
                exit MODFILE ! no more files to process
             else 
                if(col_bdeb)write(*,*)myname,"Found model file: '"//&
                     & mss%currentFile%fn250(1:mss%currentFile%lenf)//"'"
             end if
             !
             ! adjust observation file limits
             obs_lval(1)=mod_lval(1)
             obs_minval=mod_minval
             if (obs_lval(1).and.mss%currentFile%ind_lim) then
                obs_minval=max(obs_minval,mss%currentFile%ind_start)
             else if (mss%currentFile%ind_lim) then
                obs_minval=mss%currentFile%ind_start
                obs_lval(1)=.true.
             end if
             obs_lval(2)=mod_lval(2)
             obs_minval=mod_minval
             if (obs_lval(2).and.mss%currentFile%ind_lim) then
                obs_maxval=max(obs_maxval,mss%currentFile%ind_stop)
             else if (mss%currentFile%ind_lim) then
                obs_maxval=mss%currentFile%ind_stop
                obs_lval(2)=.true.
             end if
          end if
          !
          if(col_bdeb)write(*,*)myname,'Adjusting OBS limits:',obs_lval,obs_minval,obs_maxval
          call observation_setFileStackLimits(oss,obs_lval,obs_minval,obs_maxval,crc250,irc)
          if (irc.ne.0) then
             call colocation_errorappend(crc250,myname)
             call colocation_errorappend(crc250,"Error return from 'observation_setFileStackLimits'.")
             return
          end if
          !
          if(col_bdeb)write(*,*)myname,'Entering obs file loop.'
          ! loop over model data, using model/obs start/end limits
          OBSFILE : do ! need to enter loop if (tobs.eq.0)
             if (tobs.ne.0.and.tmod.ne.0) then ! we have observation targets available
                bok= observation_loopFileStack(oss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"observation_loopFileStack")
                   return
                end if
                if (.not.bok) then
                   if(col_bdeb)write(*,*)myname,'No more obs files.'
                   exit OBSFILE ! no more files to process
                else 
                   if(col_bdeb)write(*,*)myname,"Found obs file: '"//&
                        & oss%currentFile%fn250(1:oss%currentFile%lenf)//"'"
                end if
                ! initialise the location list
                if(col_bdeb)write(*,*)myname,'Clear model locations.'
                call observation_locclear(oss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"observation_locclear")
                   return
                end if
                call model_locclear(mss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"model_locclear")
                   return
                end if
                ! call model_sliceTarget(mss,crc250,irc)
                ! if (irc.ne.0) then
                !    call colocation_errorappend(crc250,"model_slicetarget")
                !    return
                ! end if

                if(col_bdeb)write(*,*)myname,'Entering observation loop.'

                locstart=locid
                ! loop over obs data, using model start/end limits
                LOCATION : do
                   if(col_bdeb)write(*,*)myname,'Slice observation file.'
                   ! read next observation into static BUFR memory, evaluate expressions...
                   call observation_sliceCurrentFile(oss,bok,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"observation_sliceCurrentFile")
                      return
                   end if
                   if (.not.bok) then
                      if(col_bdeb)write(*,*)myname,'No more observations to process.'
                      exit LOCATION
                   end if
                   !
                   locid=locid+1
                   !
                   !write(*,*)myname,'Evaluate expressions.'
                   ! evaluate experessions
                   call colocation_evalMatch(css,oss%trg_val,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"colocation_evalMatch")
                      return
                   end if
                   ! make target values
                   !write(*,*)myname,'Set model targets.'
                   call  model_setTargetVal(mss,css%cMatch,css%ind,css%val,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"model_setTargetVal")
                      return
                   end if
                   ! check target values
                   lok=.true.
                   call  model_checkTargetVal(mss,lok,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"model_checkTargetVal")
                      return
                   end if
                   !
                   ! make new location from observation
                   if(col_bdeb)write(*,*)myname,'Push location.',locid
                   call observation_locpushtarget(oss,locid,lok,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"observation_locPush")
                      return
                   end if
                   call model_locpushtarget(mss,locid,lok,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"model_locPush")
                      return
                   end if
                end do LOCATION
             else if (tobs.eq.0.and.tmod.ne.0) then ! use model default values

                if(col_bdeb)write(*,*)myname,'Clearing loc stack.',mss%ctrg,associated(mss%trg_v80)

                ! initialise the location list
                call model_locclear(mss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"model_locclear")
                   return
                end if
                ! call model_sliceTarget(mss,crc250,irc)
                ! if (irc.ne.0) then
                !    call colocation_errorappend(crc250,"model_sliceTarget")
                !    return
                ! end if

                if(col_bdeb)write(*,*)myname,'Creating locations from default.',associated(css%firstDef)
                if(col_bdeb)write(*,*)myname,'...:',associated(css%firstDef%next)
                css%currentDef=>css%firstDef%next
                do while (.not.associated(css%currentDef,target=css%lastDef))
                   if(col_bdeb)write(*,*)myname,'Make target values from default.'
                   ! make target values
                   call  model_setTargetDVal(mss,css%currentDef%cDef,&
                        & css%currentDef%vset,css%currentDef%val,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"model_setTargetVal")
                      return
                   end if
                   ! make new location from observation
                   locid=locid+1
                   ! check target values
                   lok=.true.
                   call  model_checkTargetVal(mss,lok,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"model_checkTargetVal")
                      return
                   end if
                   !
                   if(col_bdeb)write(*,*)myname,'Creating location:',locid
                   call model_locpushtarget(mss,locid,lok,crc250,irc)
                   if (irc.ne.0) then
                      call colocation_errorappend(crc250,"model_locPush")
                      return
                   end if
                   css%currentDef=>css%currentDef%next
                end do
             end if
             if (tmod.ne.0) then
                ! finally slice the model file and write model Table to stdout
                call model_slicecurrentfile(mss,bok,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"model_stackslicecurrentfile")
                   return
                end if
                ! make observation location-arrays
                call observation_makeLocList(oss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"makeloclist")
                   return
                end if
                ! make variable arrays
                mloc = model_locationCount(mss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,myname)
                   call colocation_errorappend(crc250,"Error return from 'locationcount'.")
                   return
                end if
                mtrg = model_trgCount(mss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,myname)
                   call colocation_errorappend(crc250,"Error return from 'trgcount'.")
                   return
                end if
                oloc=observation_locationCount(oss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,myname)
                   call colocation_errorappend(crc250,"Error return from 'locationcount'.")
                   return
                end if
                otrg=observation_trgCount(oss,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,myname)
                   call colocation_errorappend(crc250,"Error return from 'trgcount'.")
                   return
                end if
                nvar=mtrg+otrg
                if (allocated(val)) deallocate(val)
                if (allocated(var80)) deallocate(var80)
                allocate(var80(nvar),val(nvar),stat=irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,myname)
                   call colocation_errorappend(crc250,"Unable to allocate 'var'.")
                   return
                end if
                call model_getTrg80(mss,var80,0,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"mod_getTrg80")
                   return
                end if
                call observation_getTrg80(oss,var80,mtrg,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"mod_getTrg80")
                   return
                end if
                ! open expression
                call parse_open (psx,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"parse_open")
                   return
                end if
                call parse_open (psy,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"parse_open")
                   return
                end if
                ! compile expressions
                call parse_parsef(psx,x250,var80, crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"parse_parsef")
                   return
                end if
                call parse_parsef(psy,y250,var80, crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"parse_parsef")
                   return
                end if
                ! loop over output data
                if (ounit.ne.0) then
                   call chop0(nam250,250)
                   lenn=length(nam250,250,1)
                   do ii=1,mloc
                      call model_getVal(mss,ii,val,0,crc250,irc)
                      if (irc.ne.0) then
                         call colocation_errorappend(crc250,"mod_getTrg80")
                         return
                      end if
                      call observation_getVal(oss,ii,val,mtrg,crc250,irc)
                      if (irc.ne.0) then
                         call colocation_errorappend(crc250,"obs_getTrg80")
                         return
                      end if
                      ! evaluate expressions
                      valx=parse_evalf(psx,val)
                      valy=parse_evalf(psy,val)
                      ! store x and y in output file
                      write(ounit,'(2X,A,X,F27.15,X,F27.15)',iostat=irc)&
                           & nam250(1:lenn), valx, valy
                      if (irc.ne.0) then
                         call colocation_errorappend(crc250,myname)
                         call colocation_errorappend(crc250,"Error writing to Table file'.")
                         return
                      end if
                   end do
                end if
                call parse_close (psx,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"parse_close")
                   return
                end if
                call parse_close (psy,crc250,irc)
                if (irc.ne.0) then
                   call colocation_errorappend(crc250,"parse_open")
                   return
                end if
             end if
             ! end obs data loop
             if (tobs.eq.0) then
                exit OBSFILE
             end if
          end do OBSFILE

          ! end model loop
          if (tmod.eq.0)  then
             exit MODFILE
          end if
       end do MODFILE
    end if
    !
    call colocation_removeMatchList(css,crc250,irc)
    if (irc.ne.0) then
       call colocation_errorappend(crc250,"closeMatch")
       return
    end if
    if (allocated(var80)) deallocate(var80)
    if (allocated(val)) deallocate(val)
    write(*,*) myname,'Done.'
    return
  end subroutine colocation_makeTable
